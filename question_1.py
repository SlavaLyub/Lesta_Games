def is_even(value):
    """
    Плюсы:
        Простота и лаконичность.
        Оператор % для определения четности – стандартный подход,
        который легко читается и понятен большинству программистов.
        Эффективность. Операция взятия остатка работает быстро для целых чисел.
    Минусы:
        Может быть чуть менее производительным для очень больших чисел
        по сравнению с использованием только целочисленного деления
        (особенно если учитывать оптимизацию на уровне железа).
    """
    return value % 2 == 0


def is_even_numbered(value):
    """
    Плюсы:
        Здесь используется целочисленное деление //,
        что может быть более оптимальным в некоторых случаях,
        так как процессоры могут эффективнее выполнять эту операцию.
        Суть алгоритма — проверка путем деления числа на 2 и умножения обратно
        демонстрирует интересный альтернативный способ проверки четности
        без использования остатка от деления.
    Минусы:
        Менее интуитивно понятно, особенно для начинающих программистов.
        На первый взгляд, может казаться сложнее, чем простое использование %.
        Операция включает дополнительное умножение,
        что может быть избыточным в случаях, когда есть более простое решение
        с использованием остатка.
    """
    return value // 2 * 2 == value


def is_even_bitwise(value):
    """
    Плюсы:
        Высокая производительность.
        Побитовые операции выполняются быстрее, чем операции деления
        или взятия остатка, поскольку они работают на уровне битов.
        Экономия ресурсов. Эта операция минимально нагружает процессор,
        что особенно важно при частых вычислениях.
    Минусы:
        Менее очевидно.
        Побитовые операции не так часто используются в
        повседневном программировании, и не все сразу поймут
        смысл этой проверки.
    """
    return (value & 1) == 0


print(is_even(10))
print(is_even_numbered(10))
print(is_even_bitwise(10))

